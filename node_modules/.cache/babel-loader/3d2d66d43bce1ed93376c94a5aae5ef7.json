{"ast":null,"code":"var _jsxFileName = \"/Users/johnny/react-widgets/src/components/Link.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Link = _ref => {\n  let {\n    className,\n    href,\n    children\n  } = _ref;\n\n  const onClick = e => {\n    //These are both boolean properties on Mac OS we make use of metal key.\n    // On windows we make use of control key.\n    // These are going to be either true or false to indicate whether or not \n    // that respective key was held down when a user clicked on this thing.\n    // So if either these are true, then we're going to not want to run any of this stuff.\n    // Instead, we're going to want to allow the browser to just do its normal thing, which is to open up\n    // a new tab and navigate to href on this link.\n    if (e.metaKey || e.ctrlKey) {\n      return;\n    } // This is because we don't want reload page when every-single-time users click the navgation bar.\n\n\n    e.preventDefault(); // This is to change the URL without refresh the whole page\n\n    window.history.pushState({}, '', href); // This is going to communicate over to those root components that the url has just changed.\n\n    const navEvent = new PopStateEvent('popstate');\n    window.dispatchEvent(navEvent);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"a\", {\n    onClick: onClick,\n    className: className,\n    href: href,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Link;\nexport default Link;\n\nvar _c;\n\n$RefreshReg$(_c, \"Link\");","map":{"version":3,"sources":["/Users/johnny/react-widgets/src/components/Link.js"],"names":["React","Link","className","href","children","onClick","e","metaKey","ctrlKey","preventDefault","window","history","pushState","navEvent","PopStateEvent","dispatchEvent"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,IAAI,GAAG,QAAmC;AAAA,MAAlC;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA;AAAnB,GAAkC;;AAE5C,QAAMC,OAAO,GAAIC,CAAD,IAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIA,CAAC,CAACC,OAAF,IAAaD,CAAC,CAACE,OAAnB,EAA4B;AACxB;AACH,KAVkB,CAWnB;;;AACAF,IAAAA,CAAC,CAACG,cAAF,GAZmB,CAanB;;AACAC,IAAAA,MAAM,CAACC,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA6B,EAA7B,EAAiCT,IAAjC,EAdmB,CAenB;;AACA,UAAMU,QAAQ,GAAG,IAAIC,aAAJ,CAAkB,UAAlB,CAAjB;AACAJ,IAAAA,MAAM,CAACK,aAAP,CAAqBF,QAArB;AACH,GAlBD;;AAoBA,sBACI;AAAG,IAAA,OAAO,EAAER,OAAZ;AAAqB,IAAA,SAAS,EAAEH,SAAhC;AAA2C,IAAA,IAAI,EAAEC,IAAjD;AAAA,cACKC;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA3BD;;KAAMH,I;AA6BN,eAAeA,IAAf","sourcesContent":["import React from 'react';\n\nconst Link = ({ className, href, children }) => {\n\n    const onClick = (e) => {\n        //These are both boolean properties on Mac OS we make use of metal key.\n        // On windows we make use of control key.\n        // These are going to be either true or false to indicate whether or not \n        // that respective key was held down when a user clicked on this thing.\n        // So if either these are true, then we're going to not want to run any of this stuff.\n        // Instead, we're going to want to allow the browser to just do its normal thing, which is to open up\n        // a new tab and navigate to href on this link.\n        if (e.metaKey || e.ctrlKey) {\n            return;\n        }\n        // This is because we don't want reload page when every-single-time users click the navgation bar.\n        e.preventDefault();\n        // This is to change the URL without refresh the whole page\n        window.history.pushState({}, '', href);\n        // This is going to communicate over to those root components that the url has just changed.\n        const navEvent = new PopStateEvent('popstate');\n        window.dispatchEvent(navEvent);\n    };\n\n    return (\n        <a onClick={onClick} className={className} href={href}>\n            {children}\n        </a>\n    );\n};\n\nexport default Link;"]},"metadata":{},"sourceType":"module"}